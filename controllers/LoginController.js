const DbActions = require("../model/DbActions");
const PasswordHasher = require("../helpers/PasswordHasher");
const SendWelcomeEmail = require("../Emails/SendWelcomeEmail");
var AuthenticationCode = require("../helpers/AuthenticationCode");
var SendLoginAuthMail = require("../Emails/SendLoginAuthMail");
var SendLoginAuthSms = require("../SmsManager/SendLoginAuthSms");
const jwt = require("jsonwebtoken");
const ErrorHandler = require("../helpers/ErrorHandler");
const User = require("../model/User");
const responseObject = require("../controllers/ViewController");
const MessageType = require("../helpers/MessageType");
const twilio = require("twilio");
class LoginController {
  constructor() {
    this.responseObject = new responseObject();
    this.SendWelcomeEmail = new SendWelcomeEmail();
    this.DbActions = new DbActions();
    this.PasswordHasher = new PasswordHasher();
    this.AuthenticationCode = new AuthenticationCode();
    this.SendLoginAuthMail = new SendLoginAuthMail();
    this.SendLoginAuthSms = new SendLoginAuthSms();
    this.User = new User();
    this.MessageType = new MessageType();
  }

  async loginAction(req, res) {
    let email = req.body.email;
    let password = req.body.password;
    //check for the existence of the vaklues

    try {
      let user = await this.DbActions.selectSingleRow("users", {
        filteringConditions: [["email", "=", email]],
      });

      if (typeof user === "undefined") {
        this.responseObject.setMesageType("normal");
        throw new Error("Incorrect Email / Password");
      }

      if (
        !(await this.PasswordHasher.comparePassword(password, user.password))
      ) {
        this.responseObject.setMesageType("normal");
        throw new Error("Incorrect Email/Password");
      }

      if (user.email_verification === null) {
        //check if the eamil has been verified
        await this.SendWelcomeEmail.sendMail(user); //resend email to the user

        //if (sendMail.status === true) {
        //get the message type for the view
        let messageType =
          this.MessageType.returnMessageType("account_activation");
        this.responseObject.setMesageType(messageType);
        this.responseObject.setData({
          email: user.email,
          toke_type: "account-activation",
        });
        throw new Error(
          "An activation email was successfully sent to your email, please activate your account by providing the code in the mail"
        );
        //}
      }

      //check if the user account status is active
      if (user.status === "inactive") {
        //get the message type for the view
        let messageType = this.MessageType.returnMessageType("blocked_account");
        this.responseObject.setMesageType(messageType);
        throw new Error(
          "Your account is inactive, please contact support for more details"
        );
      }

      //check if the authentication type the user have selected
      if (user.auth_type === "email") {

        //create the activation code
        let activationCode = await this.AuthenticationCode.createActivationCode(
          user,
          this.AuthenticationCode.login_auth_type
        );
        if (activationCode.status === false) {
          throw new Error(activationCode.message);
        }
        let token = activationCode.data;
        let sendMail = await this.SendLoginAuthMail.sendMail(user, token); //token
        if(sendMail.status === false){
          throw new Error(sendMail.message);
        }
        // check if the user has verified phone to send login code to phone
        let successMessage =
          "A login authentication code was sent to your email address, please provide code to proceed with login";
        if (user.phone_verification !== null) {
          //send the code to the user phone number
          let sendSms = await this.SendLoginAuthSms.sendPhone(user, token);
          successMessage =
            "A login authentication code was sent to your email address and phone number, please provide code to proceed with login";
        }

        this.responseObject.setMessage(successMessage);
        this.responseObject.setMesageType('login_auth_email_phone');

        this.responseObject.setStatus(true);
        this.responseObject.setData({
          email: user.email,
          email_:sendMail
        });
      } else {
        //google auth
        this.responseObject.setMessage(
          "Please Enter Code Generated By Your Authentication App"
        );
        this.responseObject.setMesageType('login_auth_app');
        this.responseObject.setStatus(true);
        this.responseObject.setData({
          email: user.email,
          token_type: this.AuthenticationCode.login_auth_type,
        });
      }

      //send response to view
      res.json(this.responseObject.sendToView());
    } catch (e) {
      this.responseObject.setMessage({
        general_error: [ErrorHandler(e)],
      });
      this.responseObject.setStatus(false);
      res.json(this.responseObject.sendToView());
    }
  }

  //activate the user account
  async AuthenticateLoginCode(req, res) {
    try {
      //authenticate if the user is logged in
      const email = req.body.email;
      const token_type = req.body.token_type;

      //select the user involved
      let userObject = await this.User.selectOneUser([["email", "=", email]]);
      if (userObject === false) {
        throw new Error("Invalid User details supplied");
      }

      //verify the token provided
      let tokenAuthentication =
        await this.AuthenticationCode.verifyTokenValidity(
          req.body.token,
          req.body.token_type,
          userObject
        );

      if (tokenAuthentication.status === false) {
        throw new Error(tokenAuthentication.message);
      }

      //create the jwt token and send to the view
      jwt.sign({ user: userObject }, "secretkey", async (err, token) => {
        this.responseObject.setMesageType("normal");
        //delete the properties that is not supposed t be sent to view
        let userObjectForView = await this.User.returnUserForView(userObject);
        this.responseObject.setData({ token: token, user: userObjectForView });
        this.responseObject.setStatus(true);
        this.responseObject.setMessage("you have been successfully logged in");
        res.status(200).json(this.responseObject.sendToView());
      });
      //
    } catch (e) {
      this.responseObject.setStatus(false);
      this.responseObject.setMessage({ general_error: [ErrorHandler(e)] });
      res.json(this.responseObject.sendToView());
    }
  }

  //for the users that make use of auth
  async authenticateLoginWithTwoFactor(req, res) {
    try {
      let email = req.body.email;

      let userObject = await this.User.selectOneUser([["email", "=", email]]);
      if (userObject === false) {
        throw new Error("Invalid User details supplied");
      }

      let verifyUser = await this.User.verifyAToken(req, userObject);
      if (verifyUser.status === false) {
        throw new Error(verifyUser.message);
      }

      //use jwt to create a token_type//create the jwt token and send to the view
      jwt.sign({ user: userObject }, "secretkey", async (err, token) => {
        this.responseObject.setMesageType("normal");
        let userObjectForView = await this.User.returnUserForView(userObject);
        this.responseObject.setData({ token: token, user: userObjectForView });
        this.responseObject.setStatus(true);
        this.responseObject.setMessage("you have been successfully logged in");
        res.status(200).json(this.responseObject.sendToView());
      });
    } catch (e) {
      //send tthe error to the views
      this.responseObject.setStatus(false);
      this.responseObject.setMessage({ general_error: [ErrorHandler(e)] });
      res.json(this.responseObject.sendToView());
    }
  }

  //resend an email auth code for login
  async resendEmailAuthCode(req, res) {
    try {
      let email = req.body.email;

      //select the user from the db using the supplied email address
      let userObject = await this.User.selectOneUser([["email", "=", email]]);
      if (userObject === false) {
        throw new Error("User does not exist");
      }

      //resend the auth email to the user email address
      await this.SendLoginAuthMail.sendMail(userObject);
      this.responseObject.setMessage(
        "A login authentication code was sent to your email address, please provide code to proceed with login"
      );
      this.responseObject.setStatus(true);
      this.responseObject.setData({
        email: userObject.email,
      });
      //send response to view
      res.json(this.responseObject.sendToView());
    } catch (err) {
      this.responseObject.setMessage({
        general_error: [ErrorHandler(err)],
      });
      this.responseObject.setStatus(false);
      res.json(this.responseObject.sendToView());
    }
  }

}

module.exports = LoginController;
